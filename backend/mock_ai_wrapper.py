"""Mock AI wrapper for testing purposes when API keys are not available."""

from typing import List, Dict, Any, Optional
import json

def generate_json_summary(retrieved: List[Dict[str, Any]], question: Optional[str] = None) -> Dict[str, Any]:
    """Generate a mock AI summary for testing purposes."""
    
    # Create a sample summary based on the input
    total_notes = len(retrieved)
    sample_content = retrieved[0]['content'] if retrieved else "No content available"
    
    # Generate a mock summary
    summary = {
        "summary": f"Medical summary: Analyzed {total_notes} clinical note(s). " + 
                  (f"Key finding: {sample_content[:100]}..." if len(sample_content) > 100 else f"Content: {sample_content}"),
        "key_points": [
            "This is a mock AI response for testing",
            f"Total notes analyzed: {total_notes}",
            "Real AI integration requires valid API keys"
        ],
        "recommendations": [
            "Continue monitoring patient",
            "Follow up as needed",
            "Configure AI provider for real analysis"
        ],
        "urgency": "moderate",
        "confidence": 0.85,
        "provider": "mock_ai"
    }
    
    if question:
        summary["question"] = question
        summary["answer"] = f"Mock answer to: {question}. This would normally be generated by AI."
    
    return summary

def embed_texts(texts: List[str]) -> List[List[float]]:
    """Generate mock embeddings for testing."""
    # Return simple mock embeddings (normally these would be 768 or 1536 dimensional vectors)
    mock_embeddings = []
    for text in texts:
        # Create a simple mock embedding based on text length and content
        embedding = [float(len(text) % 100) / 100.0] * 384  # Mock 384-dimensional embedding
        mock_embeddings.append(embedding)
    
    return mock_embeddings

# For compatibility with existing code
generate_summary = generate_json_summary